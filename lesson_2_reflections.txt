What happens when you initialize a repository? Why do you need to do it?
 - You make it a git-usable folder. To use the version control functionality.
 
How is the staging area different from the working directory and the repository? What value do you think it offers?
 - It's a place where a commit can be prepared, actions applied to there do not affect files neither in working directory or repository (it is like a buffer)
 - Helps organize what has to be commited.
 
How can you use the staging area to make sure you have one commit per logical change?
 - Just add the file(s) with git add, then commit them with git commit
 
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
 - Experimental features
 - Big changes (Architecture)

 - It would help bugfixing of the main branch without having to deal with inconsistencies. If the new feature has to be resetted, a branch is easier to deal with than reverting the changes in the master.
 
How do the diagrams help you visualize the branch structure?
 - It shows you the reachability of each commit

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
 - The sum of the changes made in both of the branches on a single branch. 
 - Because it diverges from the master in a certain point and then it goes back to it (when merged).
 
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
 - Automatization helps to reduce human error in standard merges. Whereas manually commits are necessary for edge cases. 